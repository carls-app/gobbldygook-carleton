<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">

<spec>
<title>The Department Class Specification.</title>
<header>This class models a department at St Olaf College.</header>
<credits>Xandra Best. Wednesday, May 15, 2013</credits>

<class name="Department">

<nosuperclass/>

<variables>
<var name="id" type="dept_t" visibility="private">Department ID.</var>
</variables>

<constructors-list>

<constructor>
<desc>Default constructor.</desc>
<noarguments/>
<statechange>Department object is initialized with id = NONE.</statechange>
</constructor>

<constructor>
<desc>Int constructor.</desc>
<arguments>
<arg name="i" type="int">Represents a department.</arg>
</arguments>
<statechange>Department object is initialized with corresponding id.</statechange>
</constructor>

<constructor>
<desc>Dept constructor.</desc>
<arguments>
<arg name="department" type="dept_t">Represents a department.</arg>
</arguments>
<statechange>Department object is initialized with id = department.</statechange>
</constructor>

<constructor>
<desc>String constructor.</desc>
<arguments>
<arg name="str" type="string">Represents a department.</arg>
</arguments>
<statechange>Department object is initialized with corresponding id.</statechange>
</constructor>

<constructor>
<desc>Copy constructor.</desc>
<arguments>
<arg name="c" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>Department object is initialized as a copy of c by calling copy.</statechange>
</constructor>

</constructors-list>

<methods-list>

<method name="copy" visibility="private">
<desc>copies state variables of one Department to another.</desc>
<arguments>
<arg name="c" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>State variables are copied from c.</statechange>
<return>No return value.</return>
</method>

<method name="intToDept" returntype="dept_t" visibility="protected">
<desc>Convert int to dept_t</desc>
<arguments>
<arg name="i" type="int">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return appropriate dept_t representing department.</return>
</method>

<method name="stringToDept" returntype="dept_t" visibility="protected">
<desc>Convert string to dept_t</desc>
<arguments>
<arg name="str" type="string">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return appropriate dept_t representing department.</return>
</method>

<method name="shortStringToDept" returntype="dept_t" visibility="protected">
<desc>Convert short string to dept_t</desc>
<arguments>
<arg name="str" type="string">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return appropriate dept_t representing department.</return>
</method>

<method name="longStringToDept" returntype="dept_t" visibility="protected">
<desc>Convert long string to dept_t</desc>
<arguments>
<arg name="str" type="string">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return appropriate dept_t representing department.</return>
</method>

<method name="deptToString" returntype="string" visibility="protected">
<desc>Convert dept_t to string.</desc>
<arguments>
<arg name="dept" type="dept_t">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return string of department abbreviation.</return>
</method>

<method name="deptToLongName" returntype="string" visibility="protected">
<desc>Convert dept_t to department full name.</desc>
<arguments>
<arg name="dept" type="dept_t">Represents a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return string of department full name.</return>
</method>

<method name="=" returntype="Department">
<desc>Assignment operator.</desc>
<arguments>
<arg name="c" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>State variables are set equal to those of c.</statechange>
<return>Returns reference to a Department copied from c.</return>
</method>

<method name="==" returntype="bool">
<desc>Equal to operator</desc>
<arguments>
<arg name="d1" type="const Department">Reference to a department.</arg>
<arg name="d2" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if departments are identical.</return>
</method>

<method name="!=" returntype="bool">
<desc>Not equal to operator</desc>
<arguments>
<arg name="d1" type="const Department">Reference to a department.</arg>
<arg name="d2" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if departments are not identical.</return>
</method>

<method name="&lt;" returntype="bool">
<desc>Not equal to operator</desc>
<arguments>
<arg name="d1" type="const Department">Reference to a department.</arg>
<arg name="d2" type="const Department">Reference to a department.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if id for d1 is less than id for d2.</return>
</method>

<method name="getDept_t" returntype="dept_t">
<desc>Get dept_t.</desc>
<noarguments />
<statechange>No state change.</statechange>
<return>Return department dept_t.</return>
</method>

<method name="getName" returntype="string">
<desc>Get name of department.</desc>
<noarguments />
<statechange>No state change.</statechange>
<return>Return department abbreviation.</return>
</method>

<method name="getFullName" returntype="string">
<desc>Get long name of department.</desc>
<noarguments />
<statechange>No state change.</statechange>
<return>Return full name of department.</return>
</method>

<method name="getData" returntype="ostream">
<desc>Get data relating to major.</desc>
<noarguments />
<statechange>Writes out data to ostream.</statechange>
<return>Returns reference to ostream.</return>
</method>

</methods-list>

</class>

</spec>
