<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>

<spec>
<title>The Requirement Class Specification.</title>
<header>This class models all requirements in a major.</header>
<credits>Xandra Best. Wednesday, May 15, 2013</credits>

<class name="Requirement">

<nosuperclass/>

<variables>
<var name="name" type="string" visibility="protected">Name of requirement.</var>
<var name="needed" type="int" visibility="protected">Number of courses needed of requirement.</var>
<var name="has" type="int" visibility="protected">Number of courses had of requirement.</var>
<var name="satisfied" type="bool" visibility="protected">Whether requirement is satisfied.</var>
</variables>

<constructors-list>

<constructor>
<desc>Default constructor.</desc>
<noarguments/>
<statechange>Requirement object is initialized using init with arguments n="", need =0.</statechange>
</constructor>

<constructor>
<desc>Partial constructor.</desc>
<arguments>
<arg name="str" type="string">Name of requirement.</arg>
</arguments>
<statechange>Requirement object is initialized using init with arguments n=str, need =0.</statechange>
</constructor>

<constructor>
<desc>Regular constructor.</desc>
<arguments>
<arg name="str" type="string">Name of requirement.</arg>
<arg name="n" type="int">Number of valid courses needed.</arg>
</arguments>
<statechange>Requirement object is initialized using init with arguments n=str, need =n.</statechange>
</constructor>

<constructor>
<desc>Copy constructor.</desc>
<arguments>
<arg name="c" type="const Requirement">Reference to a requirement.</arg>
</arguments>
<statechange>Requirement object is initialized by copying values from c.</statechange>
</constructor>

</constructors-list>

<methods-list>

<method name="init">
<desc>Initializes instance of Requirement.</desc>
<arguments>
<arg name="n" type="string">Name of requirement.</arg>
<arg name="needed" type="int">Number of courses needed for requirement.</arg>
</arguments>
<statechange>State variables are set as follows: name = n, needed = need, has =0, satisfied = false.</statechange>
<return>No return value.</return>
</method>

<method name="copy">
<desc>Copies state variable values from one requirement to another.</desc>
<arguments>
<arg name="c" type="const Requirement">Reference to a Requirement.</arg>
</arguments>
<statechange>State variables are changed to match those of c.</statechange>
<return>No return value.</return>
</method>

<method name="=" returntype="Requirement">
<desc>Assignment operator.</desc>
<arguments>
<arg name="c" type="const Requirement">Reference to a Requirement.</arg>
</arguments>
<statechange>State variables are changed using copy.</statechange>
<return>A requirement that is a copy of c.</return>
</method>

<method name="incrementHas">
<desc>Deal with a course that satisfies a requirement.</desc>
<noarguments/>
<statechange>Has is incremented by one and satisfied is updated.</statechange>
<return>No return value.</return>
</method>

<method name="decrementHas">
<desc>Opposite of incrementHas</desc>
<noarguments/>
<statechange>Has is decremented by one and satisfied is updated.</statechange>
<return>No return value.</return>
</method>

<method name="getName" returntype="string">
<desc>Get name of requirement.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Return name.</return>
</method>

<method name="getNeeded" returntype="int">
<desc>Get number of requirements needed.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Return needed.</return>
</method>

<method name="getHas" returntype="int">
<desc>Get number of requirements had.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Return has.</return>
</method>

<method name="getSatisfied" returntype="bool">
<desc>Check whether requirement is satisfied.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Return satisfied.</return>
</method>

<method name="setName">
<desc>Set name.</desc>
<arguments>
<arg name="str" type="string">New name.</arg>
</arguments>
<statechange>Name is set to str.</statechange>
<return>No return value.</return>
</method>

<method name="setNeeded">
<desc>Set number of requirements needed.</desc>
<arguments>
<arg name="n" type="int">New number needed.</arg>
</arguments>
<statechange>Needed is set to n.</statechange>
<return>No return value.</return>
</method>

<method name="==" returntype="friend bool">
<desc>Equal to operator. </desc>
<arguments>
<arg name="l" type="const Requirement">Reference to Requirement.</arg>
<arg name="r" type="const Requirement">Reference to Requirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if requirements are identical.</return>
</method>

<method name="!=" returntype="friend bool">
<desc>Not equal to operator.</desc>
<arguments>
<arg name="l" type="Requirement">Reference to Requirement.</arg>
<arg name="r" type="Requirement">Reference to Requirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if requirements are not identical.</return>
</method>

<method name="getData" returntype="virtual void">
<desc>Writes out data about requirements satisfied.</desc>
<arguments>
<arg name="os" type="ostream">Reference to ostream.</arg>
</arguments>
<statechange>name, need, has, satisfied written out to os.</statechange>
<return>os.</return>
</method>

<method name="display" returntype="virtual void">
<desc>Couts data about requirements satisfied.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Couts given data.</return>
</method>

</methods-list>

</class>

</spec>
