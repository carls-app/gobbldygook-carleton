<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>

<spec>
<title>The SpecialRequirement Class Specification</title>
<header>This class models a special major requirement.</header>
<credits>Xandra Best. Wednesday, May 15, 2013</credits>


<class name="SpecialRequirement">

<superclass name="Requirement"/>

<variables>
<var name="validSets" type="vector of MajorRequirement">Vector of sets of requirements that fulfill this requirement.</var>
</variables>

<constructors-list>

<constructor>
<desc>Default constructor.</desc>
<noarguments/>
<statechange>SpecialRequirement object is initialized by calling Requirement default constructor.</statechange>
</constructor>

<constructor>
<desc>Partial constructor.</desc>
<arguments>
<arg name="str" type="string">Represents name of requirement.</arg>
</arguments>
<statechange>SpecialRequirement object is initialized by calling Requirement partial constructor.</statechange>
</constructor>

<constructor>
<desc>Regular constructor.</desc>
<arguments>
<arg name="str" type="string">Represents name of requirement.</arg>
<arg name="n" type="int">Represents number of courses needed to fulfill this requirement.</arg>
</arguments>
<statechange>SpecialRequirement object is initialized by calling Requirement regular constructor.</statechange>
</constructor>

<constructor>
<desc>Copy constructor</desc>
<arguments>
<arg name="c" type="const SpecialRequirement">Reference to a SpecialRequirement.</arg>
</arguments>
<statechange>SpecialRequirement object is initialized by calling Requirement copy constructor.</statechange>
</constructor>

</constructors-list>

<methods-list>

<method name="init">
<desc>Initializes instances of SpecialRequirement.</desc>
<arguments>
<arg name="n" type="string">Name of requirement.</arg>
</arguments>
<statechange>Initializes instance of SpecialRequirement by calling Requirement init(n,0).</statechange>
<return>No return value.</return>
</method>

<method name="copy">
<desc>Changes all state variables to equal those of another SpecialRequirement.</desc>
<arguments>
<arg name="c" type="const SpecialRequirement.">Reference to a SpecialRequirement.</arg>
</arguments>
<statechange>Copies over state variables by calling Requirement copy.</statechange>
<return>No return value.</return>
</method>

<method name="fulfillsRequirement" returntype="bool">
<desc>Checks if set fulfills requirement.</desc>
<arguments>
<arg name="c" type="const MajorRequirement">Reference to MajorRequirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Return true if requirement is fulfilled by this set.</return>
</method>

<method name="addSet">
<desc>Add set to list of valid sets.</desc>
<arguments>
<arg name="mr" type="MajorRequirement">Reference to MajorRequirement.</arg>
</arguments>
<statechange>Adds set to validSets.</statechange>
<return>No return value.</return>
</method>

<method name="=" returntype="SpecialRequirement.">
<desc>Assignment operator.</desc>
<arguments>
<arg name="c" type="const SpecialRequirement">Reference to a SpecialRequirement.</arg>
</arguments>
<statechange>Changes state variables to equal those of c.</statechange>
<return>Returns that SpecialRequirement.</return>
</method>

<method name="==" returntype="friend bool">
<desc>Equal to operator.</desc>
<arguments>
<arg name="l" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
<arg name="r" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>True if state variables are identical.</return>
</method>

<method name="!=" returntype="friend bool">
<desc>Not equal to operator.</desc>
<arguments>
<arg name="l" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
<arg name="r" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>True if state variables are not identical.</return>
</method>

<method name="==" returntype="friend bool">
<desc>Equal to operator.</desc>
<arguments>
<arg name="l" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
<arg name="r" type="const Requirement.">Reference to Requirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>True if state variables are identical.</return>
</method>

<method name="!=" returntype="friend bool">
<desc>Not equal to operator.</desc>
<arguments>
<arg name="l" type="const SpecialRequirement.">Reference to SpecialRequirement.</arg>
<arg name="r" type="const Requirement.">Reference to Requirement.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>True if state variables are not identical.</return>
</method>

<method name="getData" returntype="ostream">
<desc>Reads in data from ostream.</desc>
<arguments>
<arg name="os" type="ostream">Reference to ostream.</arg>
</arguments>
<statechange>Reads name, needs, has, satisfied into ostream.</statechange>
<return>Returns reference to os.</return>
</method>

<method name="display">
<desc>Displays data related to SpecialRequirements.</desc>
<noarguments/>
<statechange>No state change.</statechange>
<return>Cout data.</return>
</method>

</methods-list>

</class>

</spec>
