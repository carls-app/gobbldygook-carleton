<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>

<spec>
<title>The Student Class Specification</title>
<header>This class models a student at St Olaf College</header>
<credits>Xandra Best. Wednesday, May 15, 2013</credits>

<class name="Student">

<nosuperclass/>

<variables>
<var name="majors" type="vector of Major">The student's majors.</var>
<var name="concentrations" type="vector of Concentration">The student's concentrations.</var>
<var name="courses" type="vector of Course">The courses taken by a student.</var>

</variables>

<constructors-list>

<constructor>
<desc>Default constructor.</desc>
<noarguments />
<statechange>This instance of Student is initialized by calling init, where n="", s=2000, g=2004, m="".</statechange>
</constructor>

<constructor>
<desc>Manual constructor.</desc>
<arguments>
<arg name="n" type="string">The name of the student.</arg>
<arg name="s" type="int">The starting year of the student.</arg>
<arg name="e" type="int">The graduating year of the student.</arg>
<arg name="m" type="string">The majors of the student</arg>
</arguments>
<statechange>This instance of Student is initialized by calling init, where n=n, s=s, g=e, m=m.</statechange>
</constructor>

<constructor>
<desc>Read-in constructor.</desc>
<arguments>
<arg name="fn" type="string">File name.</arg>
</arguments>
<statechange>This instance of Student using data from file.</statechange>
</constructor>
</constructors-list>

<methods-list>

<method name="init" visibility="private">
<desc>Initializes Student object.</desc>
<arguments>
<arg name="n" type="string">The name of the student.</arg>
<arg name="s" type="int">The starting year of the student.</arg>
<arg name="g" type="int">The graduation year of the student.</arg>
<arg name="m" type="string">The majors of the student.</arg>
</arguments>
<statechange>Student object is initialized with name=n, startingYear=s, graduationYear=g, and majors is filled in with m. </statechange>
<return>No return value.</return>
</method>

<method name="hasTakenCourse" returntype="bool">
<desc>Checks to see if student has taken a given course</desc>
<arguments>
<arg name="str" type="string">The course to be checked.</arg>
</arguments>
<statechange>No state change.</statechange>
<return>Bool representing whether the student has taken the course.</return>
</method>

<method name="addCourse">
<desc>Add a course to courses student has taken.</desc>
<arguments>
<arg name="c" type="const Course">A reference to a course.</arg>
</arguments>
<statechange>The given course is added to state variable courses.</statechange>
<return>No return value.</return>
</method>

<method name="addCourses">
<desc>Adds multiple courses to courses student has taken.</desc>
<arguments>
<arg name="str" type="string">Comma separated list of courses.</arg>
</arguments>
<statechange>The given courses are added to state variable courses.</statechange>
<return>No return value.</return>
</method>

<method name="addMajor">
<desc>Add a major to student's majors</desc>
<arguments>
<arg name="m" type="const Major">A reference to a major.</arg>
</arguments>
<statechange>The given major is added to state variable majors.</statechange>
<return>No return value.</return>
</method>

<method name="addMajors">
<desc>Adds multiple majors to student's majors.</desc>
<arguments>
<arg name="str" type="string">Comma separated list of majors.</arg>
</arguments>
<statechange>The given majors are added to state variable majors.</statechange>
<return>No return value.</return>
</method>

<method name="addConcentration">
<desc>Add a concentration to student's concentrations</desc>
<arguments>
<arg name="m" type="const Concentration">A reference to a concentration.</arg>
</arguments>
<statechange>The given concentration is added to state variable concentrations.</statechange>
<return>No return value.</return>
</method>

<method name="addConcentrations">
<desc>Adds multiple concentration to student's concentrations.</desc>
<arguments>
<arg name="str" type="string">Comma separated list of concentrations.</arg>
</arguments>
<statechange>The given concentrations are added to state variable concentrations.</statechange>
<return>No return value.</return>
</method>

<method name="getData" returntype="ostream">
<desc>Relays data about students.</desc>
<arguments>
<arg name="os" type="ostream">reference to ostream.</arg>
</arguments>
<statechange>Data about student's majors, concentrations, and courses read out to ostream.</statechange>
<return>Reference to ostream.</return>
</method>

<method name="display">
<desc>displays data about students.</desc>
<noarguments />
<statechange>No state change.</statechange>
<return>displays student's majors, concentrations, and courses.</return>
</method>

</methods-list>

</class>

</spec>
