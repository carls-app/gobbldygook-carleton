"use strict";
var _extends = Object.assign || function(target) {
	for (var i = 1; i < arguments.length; i++) {
		var source = arguments[i];
		for (var key in source) {
			if (Object.prototype.hasOwnProperty.call(source, key)) {
				target[key] = source[key];
			}
		}
	}
	return target;
};
module.exports = (function() {
	/*
	 * Generated by PEG.js 0.8.0.
	 *
	 * http://pegjs.majda.cz/
	 */
	function peg$subclass(child, parent) {
		function ctor() {
			this.constructor = child;
		}
		ctor.prototype = parent.prototype;
		child.prototype = new ctor();
	}

	function SyntaxError(message, expected, found, offset, line, column) {
		this.message = message;
		this.expected = expected;
		this.found = found;
		this.offset = offset;
		this.line = line;
		this.column = column;
		this.name = "SyntaxError";
	}
	peg$subclass(SyntaxError, Error);

	function parse(input) {
		var options = arguments.length > 1 ? arguments[1] : {},
			peg$FAILED = {},
			peg$startRuleFunctions = {
				start: peg$parsestart
			},
			peg$startRuleFunction = peg$parsestart,
			peg$c0 = {
				type: "other",
				description: "expression"
			},
			peg$c1 = peg$FAILED,
			peg$c2 = function peg$c2(e) {
				return e;
			},
			peg$c3 = null,
			peg$c4 = "s",
			peg$c5 = {
				type: "literal",
				value: "s",
				description: "\"s\""
			},
			peg$c6 = "course",
			peg$c7 = {
				type: "literal",
				value: "course",
				description: "\"course\""
			},
			peg$c8 = "where",
			peg$c9 = {
				type: "literal",
				value: "where",
				description: "\"where\""
			},
			peg$c10 = function peg$c10(count, where) {
				return {
					$type: 'where',
					$count: count,
					$where: where
				};
			},
			peg$c11 = "only",
			peg$c12 = {
				type: "literal",
				value: "only",
				description: "\"only\""
			},
			peg$c13 = "courses",
			peg$c14 = {
				type: "literal",
				value: "courses",
				description: "\"courses\""
			},
			peg$c15 = function peg$c15(where) {
				return {
					$where: where
				};
			},
			peg$c16 = "from",
			peg$c17 = {
				type: "literal",
				value: "from",
				description: "\"from\""
			},
			peg$c18 = function peg$c18(of) {
				return {
					$of: of
				};
			},
			peg$c19 = function peg$c19(filter) {
				return _extends({}, filter, {
					$type: 'filter'
				});
			},
			peg$c20 = "occurrence",
			peg$c21 = {
				type: "literal",
				value: "occurrence",
				description: "\"occurrence\""
			},
			peg$c22 = "of",
			peg$c23 = {
				type: "literal",
				value: "of",
				description: "\"of\""
			},
			peg$c24 = function peg$c24(count, course) {
				return {
					$type: 'occurrence',
					$count: count,
					$course: course.$course
				};
			},
			peg$c25 = "{",
			peg$c26 = {
				type: "literal",
				value: "{",
				description: "\"{\""
			},
			peg$c27 = "}",
			peg$c28 = {
				type: "literal",
				value: "}",
				description: "\"}\""
			},
			peg$c29 = function peg$c29(q) {
				return q;
			},
			peg$c30 = {
				type: "other",
				description: "qualification-or"
			},
			peg$c31 = "|",
			peg$c32 = {
				type: "literal",
				value: "|",
				description: "\"|\""
			},
			peg$c33 = function peg$c33(lhs, rhs) {
				return {
					$type: 'boolean',
					$or: [lhs].concat('$or' in rhs ? rhs.$or : [rhs])
				};
			},
			peg$c34 = {
				type: "other",
				description: "qualification-and"
			},
			peg$c35 = "&",
			peg$c36 = {
				type: "literal",
				value: "&",
				description: "\"&\""
			},
			peg$c37 = function peg$c37(lhs, rhs) {
				return {
					$type: 'boolean',
					$and: [lhs].concat('$and' in rhs ? rhs.$and : [rhs])
				};
			},
			peg$c38 = function peg$c38(f, q) {
				return _extends({}, f, {
					$where: q
				});
			},
			peg$c39 = [],
			peg$c40 = /^[a-z0-9_\-]/i,
			peg$c41 = {
				type: "class",
				value: "[a-z0-9_\\-]i",
				description: "[a-z0-9_\\-]i"
			},
			peg$c42 = function peg$c42(word) {
				return word.join('');
			},
			peg$c43 = function peg$c43(key, op, value) {
				return {
					$type: 'qualification',
					$key: key,
					$operator: op,
					$value: value
				};
			},
			peg$c44 = {
				type: "other",
				description: "function"
			},
			peg$c45 = function peg$c45(name, prop) {
				return {
					$name: name,
					$prop: prop,
					$type: 'function'
				};
			},
			peg$c46 = "<=",
			peg$c47 = {
				type: "literal",
				value: "<=",
				description: "\"<=\""
			},
			peg$c48 = function peg$c48() {
				return '$lte';
			},
			peg$c49 = "<",
			peg$c50 = {
				type: "literal",
				value: "<",
				description: "\"<\""
			},
			peg$c51 = function peg$c51() {
				return '$lt';
			},
			peg$c52 = "==",
			peg$c53 = {
				type: "literal",
				value: "==",
				description: "\"==\""
			},
			peg$c54 = "=",
			peg$c55 = {
				type: "literal",
				value: "=",
				description: "\"=\""
			},
			peg$c56 = function peg$c56() {
				return '$eq';
			},
			peg$c57 = ">=",
			peg$c58 = {
				type: "literal",
				value: ">=",
				description: "\">=\""
			},
			peg$c59 = function peg$c59() {
				return '$gte';
			},
			peg$c60 = ">",
			peg$c61 = {
				type: "literal",
				value: ">",
				description: "\">\""
			},
			peg$c62 = function peg$c62() {
				return '$gt';
			},
			peg$c63 = "!=",
			peg$c64 = {
				type: "literal",
				value: "!=",
				description: "\"!=\""
			},
			peg$c65 = function peg$c65() {
				return '$ne';
			},
			peg$c66 = {
				type: "other",
				description: "whitespace"
			},
			peg$c67 = /^[ \n\t\r]/,
			peg$c68 = {
				type: "class",
				value: "[ \\n\\t\\r]",
				description: "[ \\n\\t\\r]"
			},
			peg$c69 = "zero",
			peg$c70 = {
				type: "literal",
				value: "zero",
				description: "\"zero\""
			},
			peg$c71 = "one",
			peg$c72 = {
				type: "literal",
				value: "one",
				description: "\"one\""
			},
			peg$c73 = "two",
			peg$c74 = {
				type: "literal",
				value: "two",
				description: "\"two\""
			},
			peg$c75 = "three",
			peg$c76 = {
				type: "literal",
				value: "three",
				description: "\"three\""
			},
			peg$c77 = "four",
			peg$c78 = {
				type: "literal",
				value: "four",
				description: "\"four\""
			},
			peg$c79 = "five",
			peg$c80 = {
				type: "literal",
				value: "five",
				description: "\"five\""
			},
			peg$c81 = "six",
			peg$c82 = {
				type: "literal",
				value: "six",
				description: "\"six\""
			},
			peg$c83 = "seven",
			peg$c84 = {
				type: "literal",
				value: "seven",
				description: "\"seven\""
			},
			peg$c85 = "eight",
			peg$c86 = {
				type: "literal",
				value: "eight",
				description: "\"eight\""
			},
			peg$c87 = "nine",
			peg$c88 = {
				type: "literal",
				value: "nine",
				description: "\"nine\""
			},
			peg$c89 = "ten",
			peg$c90 = {
				type: "literal",
				value: "ten",
				description: "\"ten\""
			},
			peg$c91 = function peg$c91(num) {
				if (num === 'zero') {
					return 0;
				} else if (num === 'one') {
					return 1;
				} else if (num === 'two') {
					return 2;
				} else if (num === 'three') {
					return 3;
				} else if (num === 'four') {
					return 4;
				} else if (num === 'five') {
					return 5;
				} else if (num === 'six') {
					return 6;
				} else if (num === 'seven') {
					return 7;
				} else if (num === 'eight') {
					return 8;
				} else if (num === 'nine') {
					return 9;
				} else if (num === 'ten') {
					return 10;
				}
			},
			peg$c92 = "!",
			peg$c93 = {
				type: "literal",
				value: "!",
				description: "\"!\""
			},
			peg$c94 = function peg$c94(value) {
				return {
					$type: 'boolean',
					$not: value
				};
			},
			peg$c95 = function peg$c95(value) {
				return value;
			},
			peg$c96 = ",",
			peg$c97 = {
				type: "literal",
				value: ",",
				description: "\",\""
			},
			peg$c98 = function peg$c98(second) {
				return second;
			},
			peg$c99 = function peg$c99(val, rest) {
				return [val].concat(rest);
			},
			peg$c100 = function peg$c100(of) {
				return flatten(of);
			},
			peg$c101 = "all",
			peg$c102 = {
				type: "literal",
				value: "all",
				description: "\"all\""
			},
			peg$c103 = "any",
			peg$c104 = {
				type: "literal",
				value: "any",
				description: "\"any\""
			},
			peg$c105 = function peg$c105() {
				return 1;
			},
			peg$c106 = "none",
			peg$c107 = {
				type: "literal",
				value: "none",
				description: "\"none\""
			},
			peg$c108 = function peg$c108() {
				return 0;
			},
			peg$c109 = function peg$c109(count, of) {
				if (count === 'all') count = of.length;
				if (count && of.length < count) throw new Error("you requested " + count + " items, but only listed " + of.length + " options (" + JSON.stringify(of) + ").");
				return {
					$type: 'of',
					$count: count,
					$of: of
				};
			},
			peg$c110 = "credit",
			peg$c111 = {
				type: "literal",
				value: "credit",
				description: "\"credit\""
			},
			peg$c112 = "department",
			peg$c113 = {
				type: "literal",
				value: "department",
				description: "\"department\""
			},
			peg$c114 = "children",
			peg$c115 = {
				type: "literal",
				value: "children",
				description: "\"children\""
			},
			peg$c116 = function peg$c116() {
				return {
					$from: 'children',
					$children: '$all'
				};
			},
			peg$c117 = "filter",
			peg$c118 = {
				type: "literal",
				value: "filter",
				description: "\"filter\""
			},
			peg$c119 = function peg$c119() {
				return {
					$from: 'filter'
				};
			},
			peg$c120 = function peg$c120(where) {
				return {
					$from: 'where',
					$where: where
				};
			},
			peg$c121 = function peg$c121(reqs) {
				return {
					$from: 'children',
					$children: flatten(reqs)
				};
			},
			peg$c122 = function peg$c122(count, what, from) {
				if (what === 'department' && from['$from'] === 'where') throw new Error('cannot use a modifier with "departments from courses"');
				return _extends({}, from, {
					$type: 'modifier',
					$count: count,
					$what: what
				});
			},
			peg$c123 = /^[A-Z0-9]/,
			peg$c124 = {
				type: "class",
				value: "[A-Z0-9]",
				description: "[A-Z0-9]"
			},
			peg$c125 = /^[A-Za-z0-9_\- \/]/,
			peg$c126 = {
				type: "class",
				value: "[A-Za-z0-9_\\- \\/]",
				description: "[A-Za-z0-9_\\- \\/]"
			},
			peg$c127 = function peg$c127(initial, rest) {
				return initial + rest.join('');
			},
			peg$c128 = function peg$c128(title) {
				return title.trim();
			},
			peg$c129 = {
				type: "other",
				description: "requirement reference"
			},
			peg$c130 = function peg$c130(t) {
				return " (" + t + ")";
			},
			peg$c131 = function peg$c131(a, b) {
				return "" + a + (b || '');
			},
			peg$c132 = function peg$c132(title) {
				if (options.abbreviations && title in options.abbreviations) {
					title = options.abbreviations[title];
				} else if (options.titles && title in options.titles) {
					title = options.titles[title];
				}
				return {
					$type: 'reference',
					$requirement: title
				};
			},
			peg$c133 = ".",
			peg$c134 = {
				type: "literal",
				value: ".",
				description: "\".\""
			},
			peg$c135 = function peg$c135(semester) {
				return {
					semester: semester
				};
			},
			peg$c136 = function peg$c136(year, sub) {
				return _extends({}, sub, {
					year: year
				});
			},
			peg$c137 = function peg$c137(section, sub) {
				return _extends({}, sub, {
					section: section
				});
			},
			peg$c138 = function peg$c138(dept, num, details) {
				return {
					$type: 'course',
					$course: _extends({}, details, dept || fetchDept(), num)
				};
			},
			peg$c139 = function peg$c139(c1, c2) {
				return c1 + c2;
			},
			peg$c140 = function peg$c140(chars) {
				return {
					dept: chars.join(''),
					type: 'joined'
				};
			},
			peg$c141 = "/",
			peg$c142 = {
				type: "literal",
				value: "/",
				description: "\"/\""
			},
			peg$c143 = function peg$c143(l1, l2) {
				return {
					dept: l1 + l2,
					type: 'seperate'
				};
			},
			peg$c144 = function peg$c144(dept1, part2) {
				var type = part2.type;
				var dept2 = part2.dept;
				var department = undefined;
				if (type === 'joined') {
					department = {
						department: [dept1 + dept2]
					};
				} else if (type === 'seperate') {
					department = {
						department: [expandDepartment(dept1), expandDepartment(dept2)]
					};
				}
				storeDept(department);
				return department;
			},
			peg$c145 = {
				type: "other",
				description: "course number"
			},
			peg$c146 = function peg$c146(nums) {
				return {
					number: parseInt(nums.join(''))
				};
			},
			peg$c147 = "XX",
			peg$c148 = {
				type: "literal",
				value: "XX",
				description: "\"XX\""
			},
			peg$c149 = function peg$c149(num) {
				return {
					level: num * 100
				};
			},
			peg$c150 = "I",
			peg$c151 = {
				type: "literal",
				value: "I",
				description: "\"I\""
			},
			peg$c152 = "L",
			peg$c153 = {
				type: "literal",
				value: "L",
				description: "\"L\""
			},
			peg$c154 = function peg$c154(num, international, lab) {
				var result = {};
				if (international) {
					result.international = true;
				}
				if (lab) {
					result.lab = true;
				}
				return _extends({}, result, num);
			},
			peg$c155 = "*",
			peg$c156 = {
				type: "literal",
				value: "*",
				description: "\"*\""
			},
			peg$c157 = function peg$c157(nums) {
				return parseInt(nums.join(''));
			},
			peg$c158 = /^[1-5]/,
			peg$c159 = {
				type: "class",
				value: "[1-5]",
				description: "[1-5]"
			},
			peg$c160 = function peg$c160(num) {
				return parseInt(num);
			},
			peg$c161 = /^[A-Z]/,
			peg$c162 = {
				type: "class",
				value: "[A-Z]",
				description: "[A-Z]"
			},
			peg$c163 = function peg$c163(char) {
				return char;
			},
			peg$c164 = /^[a-z]/i,
			peg$c165 = {
				type: "class",
				value: "[a-z]i",
				description: "[a-z]i"
			},
			peg$c166 = function peg$c166(chars) {
				return chars.join('');
			},
			peg$c167 = /^[0-9]/,
			peg$c168 = {
				type: "class",
				value: "[0-9]",
				description: "[0-9]"
			},
			peg$c169 = "(",
			peg$c170 = {
				type: "literal",
				value: "(",
				description: "\"(\""
			},
			peg$c171 = ")",
			peg$c172 = {
				type: "literal",
				value: ")",
				description: "\")\""
			},
			peg$currPos = 0,
			peg$reportedPos = 0,
			peg$cachedPos = 0,
			peg$cachedPosDetails = {
				line: 1,
				column: 1,
				seenCR: false
			},
			peg$maxFailPos = 0,
			peg$maxFailExpected = [],
			peg$silentFails = 0,
			peg$result;
		if ("startRule" in options) {
			if (!(options.startRule in peg$startRuleFunctions)) {
				throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
			}
			peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		}

		function text() {
			return input.substring(peg$reportedPos, peg$currPos);
		}

		function offset() {
			return peg$reportedPos;
		}

		function line() {
			return peg$computePosDetails(peg$reportedPos).line;
		}

		function column() {
			return peg$computePosDetails(peg$reportedPos).column;
		}

		function expected(description) {
			throw peg$buildException(null, [{
				type: "other",
				description: description
			}], peg$reportedPos);
		}

		function error(message) {
			throw peg$buildException(message, null, peg$reportedPos);
		}

		function peg$computePosDetails(pos) {
			function advance(details, startPos, endPos) {
				var p, ch;
				for (p = startPos; p < endPos; p++) {
					ch = input.charAt(p);
					if (ch === "\n") {
						if (!details.seenCR) {
							details.line++;
						}
						details.column = 1;
						details.seenCR = false;
					} else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
						details.line++;
						details.column = 1;
						details.seenCR = true;
					} else {
						details.column++;
						details.seenCR = false;
					}
				}
			}
			if (peg$cachedPos !== pos) {
				if (peg$cachedPos > pos) {
					peg$cachedPos = 0;
					peg$cachedPosDetails = {
						line: 1,
						column: 1,
						seenCR: false
					};
				}
				advance(peg$cachedPosDetails, peg$cachedPos, pos);
				peg$cachedPos = pos;
			}
			return peg$cachedPosDetails;
		}

		function peg$fail(expected) {
			if (peg$currPos < peg$maxFailPos) {
				return;
			}
			if (peg$currPos > peg$maxFailPos) {
				peg$maxFailPos = peg$currPos;
				peg$maxFailExpected = [];
			}
			peg$maxFailExpected.push(expected);
		}

		function peg$buildException(message, expected, pos) {
			function cleanupExpected(expected) {
				var i = 1;
				expected.sort(function(a, b) {
					if (a.description < b.description) {
						return -1;
					} else if (a.description > b.description) {
						return 1;
					} else {
						return 0;
					}
				});
				while (i < expected.length) {
					if (expected[i - 1] === expected[i]) {
						expected.splice(i, 1);
					} else {
						i++;
					}
				}
			}

			function buildMessage(expected, found) {
				function stringEscape(s) {
					function hex(ch) {
						return ch.charCodeAt(0).toString(16).toUpperCase();
					}
					return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
						return '\\x0' + hex(ch);
					}).replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
						return '\\x' + hex(ch);
					}).replace(/[\u0180-\u0FFF]/g, function(ch) {
						return "\\u0" + hex(ch);
					}).replace(/[\u1080-\uFFFF]/g, function(ch) {
						return "\\u" + hex(ch);
					});
				}
				var expectedDescs = new Array(expected.length),
					expectedDesc, foundDesc, i;
				for (i = 0; i < expected.length; i++) {
					expectedDescs[i] = expected[i].description;
				}
				expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
				foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
				return "Expected " + expectedDesc + " but " + foundDesc + " found.";
			}
			var posDetails = peg$computePosDetails(pos),
				found = pos < input.length ? input.charAt(pos) : null;
			if (expected !== null) {
				cleanupExpected(expected);
			}
			return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);
		}

		function peg$parsestart() {
			var s0;
			s0 = peg$parseor();
			return s0;
		}

		function peg$parseexpr() {
			var s0, s1, s2, s3;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parse_();
			if (s1 !== peg$FAILED) {
				s2 = peg$parsenot();
				if (s2 === peg$FAILED) {
					s2 = peg$parseparenthetical();
					if (s2 === peg$FAILED) {
						s2 = peg$parsecourse();
						if (s2 === peg$FAILED) {
							s2 = peg$parsewhere();
							if (s2 === peg$FAILED) {
								s2 = peg$parsefilter();
								if (s2 === peg$FAILED) {
									s2 = peg$parseoccurrence();
									if (s2 === peg$FAILED) {
										s2 = peg$parseof();
										if (s2 === peg$FAILED) {
											s2 = peg$parsemodifier();
											if (s2 === peg$FAILED) {
												s2 = peg$parsereference();
											}
										}
									}
								}
							}
						}
					}
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parse_();
					if (s3 !== peg$FAILED) {
						peg$reportedPos = s0;
						s1 = peg$c2(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c0);
				}
			}
			return s0;
		}

		function peg$parseoptional_s() {
			var s0;
			if (input.charCodeAt(peg$currPos) === 115) {
				s0 = peg$c4;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c5);
				}
			}
			if (s0 === peg$FAILED) {
				s0 = peg$c3;
			}
			return s0;
		}

		function peg$parsewhere() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8;
			s0 = peg$currPos;
			s1 = peg$parseenglish_integer();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 6) === peg$c6) {
						s3 = peg$c6;
						peg$currPos += 6;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c7);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parseoptional_s();
						if (s4 !== peg$FAILED) {
							s5 = peg$parse_();
							if (s5 !== peg$FAILED) {
								if (input.substr(peg$currPos, 5) === peg$c8) {
									s6 = peg$c8;
									peg$currPos += 5;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c9);
									}
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									if (s7 !== peg$FAILED) {
										s8 = peg$parsequalifier();
										if (s8 !== peg$FAILED) {
											peg$reportedPos = s0;
											s1 = peg$c10(s1, s8);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$c1;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$c1;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$c1;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsefilter() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8;
			s0 = peg$currPos;
			if (input.substr(peg$currPos, 4) === peg$c11) {
				s1 = peg$c11;
				peg$currPos += 4;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c12);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 7) === peg$c13) {
						s3 = peg$c13;
						peg$currPos += 7;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c14);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$currPos;
							if (input.substr(peg$currPos, 5) === peg$c8) {
								s6 = peg$c8;
								peg$currPos += 5;
							} else {
								s6 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c9);
								}
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 !== peg$FAILED) {
									s8 = peg$parsequalifier();
									if (s8 !== peg$FAILED) {
										peg$reportedPos = s5;
										s6 = peg$c15(s8);
										s5 = s6;
									} else {
										peg$currPos = s5;
										s5 = peg$c1;
									}
								} else {
									peg$currPos = s5;
									s5 = peg$c1;
								}
							} else {
								peg$currPos = s5;
								s5 = peg$c1;
							}
							if (s5 === peg$FAILED) {
								s5 = peg$currPos;
								if (input.substr(peg$currPos, 4) === peg$c16) {
									s6 = peg$c16;
									peg$currPos += 4;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c17);
									}
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									if (s7 !== peg$FAILED) {
										s8 = peg$parseof_list();
										if (s8 !== peg$FAILED) {
											peg$reportedPos = s5;
											s6 = peg$c18(s8);
											s5 = s6;
										} else {
											peg$currPos = s5;
											s5 = peg$c1;
										}
									} else {
										peg$currPos = s5;
										s5 = peg$c1;
									}
								} else {
									peg$currPos = s5;
									s5 = peg$c1;
								}
							}
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c19(s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parseoccurrence() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8;
			s0 = peg$currPos;
			s1 = peg$parseenglish_integer();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 10) === peg$c20) {
						s3 = peg$c20;
						peg$currPos += 10;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c21);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parseoptional_s();
						if (s4 !== peg$FAILED) {
							s5 = peg$parse_();
							if (s5 !== peg$FAILED) {
								if (input.substr(peg$currPos, 2) === peg$c22) {
									s6 = peg$c22;
									peg$currPos += 2;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c23);
									}
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									if (s7 !== peg$FAILED) {
										s8 = peg$parsecourse();
										if (s8 !== peg$FAILED) {
											peg$reportedPos = s0;
											s1 = peg$c24(s1, s8);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$c1;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$c1;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$c1;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsequalifier() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 123) {
				s1 = peg$c25;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c26);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseor_q();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 125) {
								s5 = peg$c27;
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c28);
								}
							}
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c29(s3);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parseor_q() {
			var s0, s1, s2, s3, s4, s5;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parseand_q();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 124) {
						s3 = peg$c31;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c32);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseor_q();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c33(s1, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseand_q();
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c30);
				}
			}
			return s0;
		}

		function peg$parseand_q() {
			var s0, s1, s2, s3, s4, s5;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parseparenthetical_q();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 38) {
						s3 = peg$c35;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c36);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseand_q();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c37(s1, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseparenthetical_q();
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c34);
				}
			}
			return s0;
		}

		function peg$parseparenthetical_q() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$parseopen_paren();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseor_q();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseclose_paren();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c29(s3);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parsequalification();
			}
			return s0;
		}

		function peg$parsequalification() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
			s0 = peg$currPos;
			s1 = peg$parseword();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseoperator();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$currPos;
							s6 = peg$parsefunc();
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_();
								if (s7 !== peg$FAILED) {
									if (input.substr(peg$currPos, 4) === peg$c16) {
										s8 = peg$c16;
										peg$currPos += 4;
									} else {
										s8 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c17);
										}
									}
									if (s8 !== peg$FAILED) {
										s9 = peg$parse_();
										if (s9 !== peg$FAILED) {
											if (input.substr(peg$currPos, 7) === peg$c13) {
												s10 = peg$c13;
												peg$currPos += 7;
											} else {
												s10 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c14);
												}
											}
											if (s10 !== peg$FAILED) {
												s11 = peg$parse_();
												if (s11 !== peg$FAILED) {
													if (input.substr(peg$currPos, 5) === peg$c8) {
														s12 = peg$c8;
														peg$currPos += 5;
													} else {
														s12 = peg$FAILED;
														if (peg$silentFails === 0) {
															peg$fail(peg$c9);
														}
													}
													if (s12 !== peg$FAILED) {
														s13 = peg$parse_();
														if (s13 !== peg$FAILED) {
															s14 = peg$parsequalifier();
															if (s14 !== peg$FAILED) {
																peg$reportedPos = s5;
																s6 = peg$c38(s6, s14);
																s5 = s6;
															} else {
																peg$currPos = s5;
																s5 = peg$c1;
															}
														} else {
															peg$currPos = s5;
															s5 = peg$c1;
														}
													} else {
														peg$currPos = s5;
														s5 = peg$c1;
													}
												} else {
													peg$currPos = s5;
													s5 = peg$c1;
												}
											} else {
												peg$currPos = s5;
												s5 = peg$c1;
											}
										} else {
											peg$currPos = s5;
											s5 = peg$c1;
										}
									} else {
										peg$currPos = s5;
										s5 = peg$c1;
									}
								} else {
									peg$currPos = s5;
									s5 = peg$c1;
								}
							} else {
								peg$currPos = s5;
								s5 = peg$c1;
							}
							if (s5 === peg$FAILED) {
								s5 = peg$currPos;
								s6 = [];
								if (peg$c40.test(input.charAt(peg$currPos))) {
									s7 = input.charAt(peg$currPos);
									peg$currPos++;
								} else {
									s7 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c41);
									}
								}
								if (s7 !== peg$FAILED) {
									while (s7 !== peg$FAILED) {
										s6.push(s7);
										if (peg$c40.test(input.charAt(peg$currPos))) {
											s7 = input.charAt(peg$currPos);
											peg$currPos++;
										} else {
											s7 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c41);
											}
										}
									}
								} else {
									s6 = peg$c1;
								}
								if (s6 !== peg$FAILED) {
									peg$reportedPos = s5;
									s6 = peg$c42(s6);
								}
								s5 = s6;
							}
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c43(s1, s3, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsefunc() {
			var s0, s1, s2, s3, s4, s5, s6, s7;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parseword();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseopen_paren();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseword();
							if (s5 !== peg$FAILED) {
								s6 = peg$parse_();
								if (s6 !== peg$FAILED) {
									s7 = peg$parseclose_paren();
									if (s7 !== peg$FAILED) {
										peg$reportedPos = s0;
										s1 = peg$c45(s1, s5);
										s0 = s1;
									} else {
										peg$currPos = s0;
										s0 = peg$c1;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$c1;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c44);
				}
			}
			return s0;
		}

		function peg$parseoperator() {
			var s0, s1;
			s0 = peg$currPos;
			if (input.substr(peg$currPos, 2) === peg$c46) {
				s1 = peg$c46;
				peg$currPos += 2;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c47);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c48();
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 60) {
					s1 = peg$c49;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c50);
					}
				}
				if (s1 !== peg$FAILED) {
					peg$reportedPos = s0;
					s1 = peg$c51();
				}
				s0 = s1;
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					if (input.substr(peg$currPos, 2) === peg$c52) {
						s1 = peg$c52;
						peg$currPos += 2;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c53);
						}
					}
					if (s1 === peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 61) {
							s1 = peg$c54;
							peg$currPos++;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c55);
							}
						}
					}
					if (s1 !== peg$FAILED) {
						peg$reportedPos = s0;
						s1 = peg$c56();
					}
					s0 = s1;
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						if (input.substr(peg$currPos, 2) === peg$c57) {
							s1 = peg$c57;
							peg$currPos += 2;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c58);
							}
						}
						if (s1 !== peg$FAILED) {
							peg$reportedPos = s0;
							s1 = peg$c59();
						}
						s0 = s1;
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							if (input.charCodeAt(peg$currPos) === 62) {
								s1 = peg$c60;
								peg$currPos++;
							} else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c61);
								}
							}
							if (s1 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c62();
							}
							s0 = s1;
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								if (input.substr(peg$currPos, 2) === peg$c63) {
									s1 = peg$c63;
									peg$currPos += 2;
								} else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c64);
									}
								}
								if (s1 !== peg$FAILED) {
									peg$reportedPos = s0;
									s1 = peg$c65();
								}
								s0 = s1;
							}
						}
					}
				}
			}
			return s0;
		}

		function peg$parse_() {
			var s0, s1;
			peg$silentFails++;
			s0 = [];
			if (peg$c67.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c68);
				}
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				if (peg$c67.test(input.charAt(peg$currPos))) {
					s1 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c68);
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c66);
				}
			}
			return s0;
		}

		function peg$parseenglish_integer() {
			var s0, s1;
			s0 = peg$currPos;
			if (input.substr(peg$currPos, 4) === peg$c69) {
				s1 = peg$c69;
				peg$currPos += 4;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c70);
				}
			}
			if (s1 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c71) {
					s1 = peg$c71;
					peg$currPos += 3;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c72);
					}
				}
				if (s1 === peg$FAILED) {
					if (input.substr(peg$currPos, 3) === peg$c73) {
						s1 = peg$c73;
						peg$currPos += 3;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c74);
						}
					}
					if (s1 === peg$FAILED) {
						if (input.substr(peg$currPos, 5) === peg$c75) {
							s1 = peg$c75;
							peg$currPos += 5;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c76);
							}
						}
						if (s1 === peg$FAILED) {
							if (input.substr(peg$currPos, 4) === peg$c77) {
								s1 = peg$c77;
								peg$currPos += 4;
							} else {
								s1 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c78);
								}
							}
							if (s1 === peg$FAILED) {
								if (input.substr(peg$currPos, 4) === peg$c79) {
									s1 = peg$c79;
									peg$currPos += 4;
								} else {
									s1 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c80);
									}
								}
								if (s1 === peg$FAILED) {
									if (input.substr(peg$currPos, 3) === peg$c81) {
										s1 = peg$c81;
										peg$currPos += 3;
									} else {
										s1 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c82);
										}
									}
									if (s1 === peg$FAILED) {
										if (input.substr(peg$currPos, 5) === peg$c83) {
											s1 = peg$c83;
											peg$currPos += 5;
										} else {
											s1 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c84);
											}
										}
										if (s1 === peg$FAILED) {
											if (input.substr(peg$currPos, 5) === peg$c85) {
												s1 = peg$c85;
												peg$currPos += 5;
											} else {
												s1 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c86);
												}
											}
											if (s1 === peg$FAILED) {
												if (input.substr(peg$currPos, 4) === peg$c87) {
													s1 = peg$c87;
													peg$currPos += 4;
												} else {
													s1 = peg$FAILED;
													if (peg$silentFails === 0) {
														peg$fail(peg$c88);
													}
												}
												if (s1 === peg$FAILED) {
													if (input.substr(peg$currPos, 3) === peg$c89) {
														s1 = peg$c89;
														peg$currPos += 3;
													} else {
														s1 = peg$FAILED;
														if (peg$silentFails === 0) {
															peg$fail(peg$c90);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c91(s1);
			}
			s0 = s1;
			return s0;
		}

		function peg$parsenot() {
			var s0, s1, s2, s3;
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 33) {
				s1 = peg$c92;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c93);
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseexpr();
					if (s3 !== peg$FAILED) {
						peg$reportedPos = s0;
						s1 = peg$c94(s3);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parseparenthetical() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$parseopen_paren();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseor();
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseclose_paren();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c95(s3);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parseor() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$parseand();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 124) {
						s3 = peg$c31;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c32);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseor();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c33(s1, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseand();
			}
			return s0;
		}

		function peg$parseand() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$parseexpr();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 38) {
						s3 = peg$c35;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c36);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseand();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c37(s1, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseexpr();
			}
			return s0;
		}

		function peg$parseof_list() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
			s0 = peg$currPos;
			s1 = peg$parseopen_paren();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = [];
					s4 = peg$currPos;
					s5 = peg$parseor();
					if (s5 !== peg$FAILED) {
						s6 = [];
						s7 = peg$currPos;
						s8 = peg$parse_();
						if (s8 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s9 = peg$c96;
								peg$currPos++;
							} else {
								s9 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c97);
								}
							}
							if (s9 !== peg$FAILED) {
								s10 = peg$parse_();
								if (s10 !== peg$FAILED) {
									s11 = peg$parseor();
									if (s11 !== peg$FAILED) {
										peg$reportedPos = s7;
										s8 = peg$c98(s11);
										s7 = s8;
									} else {
										peg$currPos = s7;
										s7 = peg$c1;
									}
								} else {
									peg$currPos = s7;
									s7 = peg$c1;
								}
							} else {
								peg$currPos = s7;
								s7 = peg$c1;
							}
						} else {
							peg$currPos = s7;
							s7 = peg$c1;
						}
						while (s7 !== peg$FAILED) {
							s6.push(s7);
							s7 = peg$currPos;
							s8 = peg$parse_();
							if (s8 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 44) {
									s9 = peg$c96;
									peg$currPos++;
								} else {
									s9 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c97);
									}
								}
								if (s9 !== peg$FAILED) {
									s10 = peg$parse_();
									if (s10 !== peg$FAILED) {
										s11 = peg$parseor();
										if (s11 !== peg$FAILED) {
											peg$reportedPos = s7;
											s8 = peg$c98(s11);
											s7 = s8;
										} else {
											peg$currPos = s7;
											s7 = peg$c1;
										}
									} else {
										peg$currPos = s7;
										s7 = peg$c1;
									}
								} else {
									peg$currPos = s7;
									s7 = peg$c1;
								}
							} else {
								peg$currPos = s7;
								s7 = peg$c1;
							}
						}
						if (s6 !== peg$FAILED) {
							peg$reportedPos = s4;
							s5 = peg$c99(s5, s6);
							s4 = s5;
						} else {
							peg$currPos = s4;
							s4 = peg$c1;
						}
					} else {
						peg$currPos = s4;
						s4 = peg$c1;
					}
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							s4 = peg$currPos;
							s5 = peg$parseor();
							if (s5 !== peg$FAILED) {
								s6 = [];
								s7 = peg$currPos;
								s8 = peg$parse_();
								if (s8 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 44) {
										s9 = peg$c96;
										peg$currPos++;
									} else {
										s9 = peg$FAILED;
										if (peg$silentFails === 0) {
											peg$fail(peg$c97);
										}
									}
									if (s9 !== peg$FAILED) {
										s10 = peg$parse_();
										if (s10 !== peg$FAILED) {
											s11 = peg$parseor();
											if (s11 !== peg$FAILED) {
												peg$reportedPos = s7;
												s8 = peg$c98(s11);
												s7 = s8;
											} else {
												peg$currPos = s7;
												s7 = peg$c1;
											}
										} else {
											peg$currPos = s7;
											s7 = peg$c1;
										}
									} else {
										peg$currPos = s7;
										s7 = peg$c1;
									}
								} else {
									peg$currPos = s7;
									s7 = peg$c1;
								}
								while (s7 !== peg$FAILED) {
									s6.push(s7);
									s7 = peg$currPos;
									s8 = peg$parse_();
									if (s8 !== peg$FAILED) {
										if (input.charCodeAt(peg$currPos) === 44) {
											s9 = peg$c96;
											peg$currPos++;
										} else {
											s9 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c97);
											}
										}
										if (s9 !== peg$FAILED) {
											s10 = peg$parse_();
											if (s10 !== peg$FAILED) {
												s11 = peg$parseor();
												if (s11 !== peg$FAILED) {
													peg$reportedPos = s7;
													s8 = peg$c98(s11);
													s7 = s8;
												} else {
													peg$currPos = s7;
													s7 = peg$c1;
												}
											} else {
												peg$currPos = s7;
												s7 = peg$c1;
											}
										} else {
											peg$currPos = s7;
											s7 = peg$c1;
										}
									} else {
										peg$currPos = s7;
										s7 = peg$c1;
									}
								}
								if (s6 !== peg$FAILED) {
									peg$reportedPos = s4;
									s5 = peg$c99(s5, s6);
									s4 = s5;
								} else {
									peg$currPos = s4;
									s4 = peg$c1;
								}
							} else {
								peg$currPos = s4;
								s4 = peg$c1;
							}
						}
					} else {
						s3 = peg$c1;
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s5 = peg$c96;
								peg$currPos++;
							} else {
								s5 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c97);
								}
							}
							if (s5 === peg$FAILED) {
								s5 = peg$c3;
							}
							if (s5 !== peg$FAILED) {
								s6 = peg$parse_();
								if (s6 !== peg$FAILED) {
									s7 = peg$parseclose_paren();
									if (s7 !== peg$FAILED) {
										peg$reportedPos = s0;
										s1 = peg$c100(s3);
										s0 = s1;
									} else {
										peg$currPos = s0;
										s0 = peg$c1;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$c1;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parseof() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$parseenglish_integer();
			if (s1 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c101) {
					s1 = peg$c101;
					peg$currPos += 3;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c102);
					}
				}
				if (s1 === peg$FAILED) {
					s1 = peg$currPos;
					if (input.substr(peg$currPos, 3) === peg$c103) {
						s2 = peg$c103;
						peg$currPos += 3;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c104);
						}
					}
					if (s2 !== peg$FAILED) {
						peg$reportedPos = s1;
						s2 = peg$c105();
					}
					s1 = s2;
					if (s1 === peg$FAILED) {
						s1 = peg$currPos;
						if (input.substr(peg$currPos, 4) === peg$c106) {
							s2 = peg$c106;
							peg$currPos += 4;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c107);
							}
						}
						if (s2 !== peg$FAILED) {
							peg$reportedPos = s1;
							s2 = peg$c108();
						}
						s1 = s2;
					}
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c22) {
						s3 = peg$c22;
						peg$currPos += 2;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c23);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parse_();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseof_list();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s0;
								s1 = peg$c109(s1, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsemodifier() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;
			s0 = peg$currPos;
			s1 = peg$parseenglish_integer();
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 6) === peg$c6) {
						s3 = peg$c6;
						peg$currPos += 6;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c7);
						}
					}
					if (s3 === peg$FAILED) {
						if (input.substr(peg$currPos, 6) === peg$c110) {
							s3 = peg$c110;
							peg$currPos += 6;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c111);
							}
						}
						if (s3 === peg$FAILED) {
							if (input.substr(peg$currPos, 10) === peg$c112) {
								s3 = peg$c112;
								peg$currPos += 10;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) {
									peg$fail(peg$c113);
								}
							}
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parseoptional_s();
						if (s4 !== peg$FAILED) {
							s5 = peg$parse_();
							if (s5 !== peg$FAILED) {
								if (input.substr(peg$currPos, 4) === peg$c16) {
									s6 = peg$c16;
									peg$currPos += 4;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c17);
									}
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parse_();
									if (s7 !== peg$FAILED) {
										s8 = peg$currPos;
										if (input.substr(peg$currPos, 8) === peg$c114) {
											s9 = peg$c114;
											peg$currPos += 8;
										} else {
											s9 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c115);
											}
										}
										if (s9 !== peg$FAILED) {
											peg$reportedPos = s8;
											s9 = peg$c116();
										}
										s8 = s9;
										if (s8 === peg$FAILED) {
											s8 = peg$currPos;
											if (input.substr(peg$currPos, 6) === peg$c117) {
												s9 = peg$c117;
												peg$currPos += 6;
											} else {
												s9 = peg$FAILED;
												if (peg$silentFails === 0) {
													peg$fail(peg$c118);
												}
											}
											if (s9 !== peg$FAILED) {
												peg$reportedPos = s8;
												s9 = peg$c119();
											}
											s8 = s9;
											if (s8 === peg$FAILED) {
												s8 = peg$currPos;
												if (input.substr(peg$currPos, 7) === peg$c13) {
													s9 = peg$c13;
													peg$currPos += 7;
												} else {
													s9 = peg$FAILED;
													if (peg$silentFails === 0) {
														peg$fail(peg$c14);
													}
												}
												if (s9 !== peg$FAILED) {
													s10 = peg$parse_();
													if (s10 !== peg$FAILED) {
														if (input.substr(peg$currPos, 5) === peg$c8) {
															s11 = peg$c8;
															peg$currPos += 5;
														} else {
															s11 = peg$FAILED;
															if (peg$silentFails === 0) {
																peg$fail(peg$c9);
															}
														}
														if (s11 !== peg$FAILED) {
															s12 = peg$parse_();
															if (s12 !== peg$FAILED) {
																s13 = peg$parsequalifier();
																if (s13 !== peg$FAILED) {
																	peg$reportedPos = s8;
																	s9 = peg$c120(s13);
																	s8 = s9;
																} else {
																	peg$currPos = s8;
																	s8 = peg$c1;
																}
															} else {
																peg$currPos = s8;
																s8 = peg$c1;
															}
														} else {
															peg$currPos = s8;
															s8 = peg$c1;
														}
													} else {
														peg$currPos = s8;
														s8 = peg$c1;
													}
												} else {
													peg$currPos = s8;
													s8 = peg$c1;
												}
												if (s8 === peg$FAILED) {
													s8 = peg$currPos;
													s9 = peg$parseopen_paren();
													if (s9 !== peg$FAILED) {
														s10 = peg$parse_();
														if (s10 !== peg$FAILED) {
															s11 = [];
															s12 = peg$currPos;
															s13 = peg$parsereference();
															if (s13 !== peg$FAILED) {
																s14 = [];
																s15 = peg$currPos;
																s16 = peg$parse_();
																if (s16 !== peg$FAILED) {
																	if (input.charCodeAt(peg$currPos) === 44) {
																		s17 = peg$c96;
																		peg$currPos++;
																	} else {
																		s17 = peg$FAILED;
																		if (peg$silentFails === 0) {
																			peg$fail(peg$c97);
																		}
																	}
																	if (s17 !== peg$FAILED) {
																		s18 = peg$parse_();
																		if (s18 !== peg$FAILED) {
																			s19 = peg$parsereference();
																			if (s19 !== peg$FAILED) {
																				peg$reportedPos = s15;
																				s16 = peg$c98(s19);
																				s15 = s16;
																			} else {
																				peg$currPos = s15;
																				s15 = peg$c1;
																			}
																		} else {
																			peg$currPos = s15;
																			s15 = peg$c1;
																		}
																	} else {
																		peg$currPos = s15;
																		s15 = peg$c1;
																	}
																} else {
																	peg$currPos = s15;
																	s15 = peg$c1;
																}
																while (s15 !== peg$FAILED) {
																	s14.push(s15);
																	s15 = peg$currPos;
																	s16 = peg$parse_();
																	if (s16 !== peg$FAILED) {
																		if (input.charCodeAt(peg$currPos) === 44) {
																			s17 = peg$c96;
																			peg$currPos++;
																		} else {
																			s17 = peg$FAILED;
																			if (peg$silentFails === 0) {
																				peg$fail(peg$c97);
																			}
																		}
																		if (s17 !== peg$FAILED) {
																			s18 = peg$parse_();
																			if (s18 !== peg$FAILED) {
																				s19 = peg$parsereference();
																				if (s19 !== peg$FAILED) {
																					peg$reportedPos = s15;
																					s16 = peg$c98(s19);
																					s15 = s16;
																				} else {
																					peg$currPos = s15;
																					s15 = peg$c1;
																				}
																			} else {
																				peg$currPos = s15;
																				s15 = peg$c1;
																			}
																		} else {
																			peg$currPos = s15;
																			s15 = peg$c1;
																		}
																	} else {
																		peg$currPos = s15;
																		s15 = peg$c1;
																	}
																}
																if (s14 !== peg$FAILED) {
																	peg$reportedPos = s12;
																	s13 = peg$c99(s13, s14);
																	s12 = s13;
																} else {
																	peg$currPos = s12;
																	s12 = peg$c1;
																}
															} else {
																peg$currPos = s12;
																s12 = peg$c1;
															}
															if (s12 !== peg$FAILED) {
																while (s12 !== peg$FAILED) {
																	s11.push(s12);
																	s12 = peg$currPos;
																	s13 = peg$parsereference();
																	if (s13 !== peg$FAILED) {
																		s14 = [];
																		s15 = peg$currPos;
																		s16 = peg$parse_();
																		if (s16 !== peg$FAILED) {
																			if (input.charCodeAt(peg$currPos) === 44) {
																				s17 = peg$c96;
																				peg$currPos++;
																			} else {
																				s17 = peg$FAILED;
																				if (peg$silentFails === 0) {
																					peg$fail(peg$c97);
																				}
																			}
																			if (s17 !== peg$FAILED) {
																				s18 = peg$parse_();
																				if (s18 !== peg$FAILED) {
																					s19 = peg$parsereference();
																					if (s19 !== peg$FAILED) {
																						peg$reportedPos = s15;
																						s16 = peg$c98(s19);
																						s15 = s16;
																					} else {
																						peg$currPos = s15;
																						s15 = peg$c1;
																					}
																				} else {
																					peg$currPos = s15;
																					s15 = peg$c1;
																				}
																			} else {
																				peg$currPos = s15;
																				s15 = peg$c1;
																			}
																		} else {
																			peg$currPos = s15;
																			s15 = peg$c1;
																		}
																		while (s15 !== peg$FAILED) {
																			s14.push(s15);
																			s15 = peg$currPos;
																			s16 = peg$parse_();
																			if (s16 !== peg$FAILED) {
																				if (input.charCodeAt(peg$currPos) === 44) {
																					s17 = peg$c96;
																					peg$currPos++;
																				} else {
																					s17 = peg$FAILED;
																					if (peg$silentFails === 0) {
																						peg$fail(peg$c97);
																					}
																				}
																				if (s17 !== peg$FAILED) {
																					s18 = peg$parse_();
																					if (s18 !== peg$FAILED) {
																						s19 = peg$parsereference();
																						if (s19 !== peg$FAILED) {
																							peg$reportedPos = s15;
																							s16 = peg$c98(s19);
																							s15 = s16;
																						} else {
																							peg$currPos = s15;
																							s15 = peg$c1;
																						}
																					} else {
																						peg$currPos = s15;
																						s15 = peg$c1;
																					}
																				} else {
																					peg$currPos = s15;
																					s15 = peg$c1;
																				}
																			} else {
																				peg$currPos = s15;
																				s15 = peg$c1;
																			}
																		}
																		if (s14 !== peg$FAILED) {
																			peg$reportedPos = s12;
																			s13 = peg$c99(s13, s14);
																			s12 = s13;
																		} else {
																			peg$currPos = s12;
																			s12 = peg$c1;
																		}
																	} else {
																		peg$currPos = s12;
																		s12 = peg$c1;
																	}
																}
															} else {
																s11 = peg$c1;
															}
															if (s11 !== peg$FAILED) {
																s12 = peg$parse_();
																if (s12 !== peg$FAILED) {
																	if (input.charCodeAt(peg$currPos) === 44) {
																		s13 = peg$c96;
																		peg$currPos++;
																	} else {
																		s13 = peg$FAILED;
																		if (peg$silentFails === 0) {
																			peg$fail(peg$c97);
																		}
																	}
																	if (s13 === peg$FAILED) {
																		s13 = peg$c3;
																	}
																	if (s13 !== peg$FAILED) {
																		s14 = peg$parse_();
																		if (s14 !== peg$FAILED) {
																			s15 = peg$parseclose_paren();
																			if (s15 !== peg$FAILED) {
																				peg$reportedPos = s8;
																				s9 = peg$c121(s11);
																				s8 = s9;
																			} else {
																				peg$currPos = s8;
																				s8 = peg$c1;
																			}
																		} else {
																			peg$currPos = s8;
																			s8 = peg$c1;
																		}
																	} else {
																		peg$currPos = s8;
																		s8 = peg$c1;
																	}
																} else {
																	peg$currPos = s8;
																	s8 = peg$c1;
																}
															} else {
																peg$currPos = s8;
																s8 = peg$c1;
															}
														} else {
															peg$currPos = s8;
															s8 = peg$c1;
														}
													} else {
														peg$currPos = s8;
														s8 = peg$c1;
													}
												}
											}
										}
										if (s8 !== peg$FAILED) {
											peg$reportedPos = s0;
											s1 = peg$c122(s1, s3, s8);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$c1;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$c1;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$c1;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$c1;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parserequirement_title() {
			var s0, s1, s2, s3, s4;
			s0 = peg$currPos;
			s1 = peg$currPos;
			if (peg$c123.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c124);
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = [];
				if (peg$c125.test(input.charAt(peg$currPos))) {
					s4 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s4 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c126);
					}
				}
				while (s4 !== peg$FAILED) {
					s3.push(s4);
					if (peg$c125.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c126);
						}
					}
				}
				if (s3 !== peg$FAILED) {
					peg$reportedPos = s1;
					s2 = peg$c127(s2, s3);
					s1 = s2;
				} else {
					peg$currPos = s1;
					s1 = peg$c1;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$c1;
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c128(s1);
			}
			s0 = s1;
			return s0;
		}

		function peg$parsereference() {
			var s0, s1, s2, s3, s4, s5, s6, s7;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$parserequirement_title();
			if (s2 !== peg$FAILED) {
				s3 = peg$currPos;
				s4 = peg$parse_();
				if (s4 !== peg$FAILED) {
					s5 = peg$parseopen_paren();
					if (s5 !== peg$FAILED) {
						s6 = peg$parserequirement_title();
						if (s6 !== peg$FAILED) {
							s7 = peg$parseclose_paren();
							if (s7 !== peg$FAILED) {
								peg$reportedPos = s3;
								s4 = peg$c130(s6);
								s3 = s4;
							} else {
								peg$currPos = s3;
								s3 = peg$c1;
							}
						} else {
							peg$currPos = s3;
							s3 = peg$c1;
						}
					} else {
						peg$currPos = s3;
						s3 = peg$c1;
					}
				} else {
					peg$currPos = s3;
					s3 = peg$c1;
				}
				if (s3 === peg$FAILED) {
					s3 = peg$c3;
				}
				if (s3 !== peg$FAILED) {
					peg$reportedPos = s1;
					s2 = peg$c131(s2, s3);
					s1 = s2;
				} else {
					peg$currPos = s1;
					s1 = peg$c1;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$c1;
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c132(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c129);
				}
			}
			return s0;
		}

		function peg$parsecourse() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
			s0 = peg$currPos;
			s1 = peg$parsec_dept();
			if (s1 === peg$FAILED) {
				s1 = peg$c3;
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsec_num();
					if (s3 !== peg$FAILED) {
						s4 = peg$currPos;
						if (input.charCodeAt(peg$currPos) === 46) {
							s5 = peg$c133;
							peg$currPos++;
						} else {
							s5 = peg$FAILED;
							if (peg$silentFails === 0) {
								peg$fail(peg$c134);
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parsec_sect();
							if (s6 !== peg$FAILED) {
								s7 = peg$currPos;
								if (input.charCodeAt(peg$currPos) === 46) {
									s8 = peg$c133;
									peg$currPos++;
								} else {
									s8 = peg$FAILED;
									if (peg$silentFails === 0) {
										peg$fail(peg$c134);
									}
								}
								if (s8 !== peg$FAILED) {
									s9 = peg$parsec_year();
									if (s9 !== peg$FAILED) {
										s10 = peg$currPos;
										if (input.charCodeAt(peg$currPos) === 46) {
											s11 = peg$c133;
											peg$currPos++;
										} else {
											s11 = peg$FAILED;
											if (peg$silentFails === 0) {
												peg$fail(peg$c134);
											}
										}
										if (s11 !== peg$FAILED) {
											s12 = peg$parsec_sem();
											if (s12 !== peg$FAILED) {
												peg$reportedPos = s10;
												s11 = peg$c135(s12);
												s10 = s11;
											} else {
												peg$currPos = s10;
												s10 = peg$c1;
											}
										} else {
											peg$currPos = s10;
											s10 = peg$c1;
										}
										if (s10 === peg$FAILED) {
											s10 = peg$c3;
										}
										if (s10 !== peg$FAILED) {
											peg$reportedPos = s7;
											s8 = peg$c136(s9, s10);
											s7 = s8;
										} else {
											peg$currPos = s7;
											s7 = peg$c1;
										}
									} else {
										peg$currPos = s7;
										s7 = peg$c1;
									}
								} else {
									peg$currPos = s7;
									s7 = peg$c1;
								}
								if (s7 === peg$FAILED) {
									s7 = peg$c3;
								}
								if (s7 !== peg$FAILED) {
									peg$reportedPos = s4;
									s5 = peg$c137(s6, s7);
									s4 = s5;
								} else {
									peg$currPos = s4;
									s4 = peg$c1;
								}
							} else {
								peg$currPos = s4;
								s4 = peg$c1;
							}
						} else {
							peg$currPos = s4;
							s4 = peg$c1;
						}
						if (s4 === peg$FAILED) {
							s4 = peg$c3;
						}
						if (s4 !== peg$FAILED) {
							peg$reportedPos = s0;
							s1 = peg$c138(s1, s3, s4);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$c1;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsec_dept() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$parseuppercase_letter();
			if (s2 !== peg$FAILED) {
				s3 = peg$parseuppercase_letter();
				if (s3 !== peg$FAILED) {
					peg$reportedPos = s1;
					s2 = peg$c139(s2, s3);
					s1 = s2;
				} else {
					peg$currPos = s1;
					s1 = peg$c1;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$c1;
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$currPos;
				s3 = [];
				s4 = peg$parseuppercase_letter();
				if (s4 !== peg$FAILED) {
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						s4 = peg$parseuppercase_letter();
					}
				} else {
					s3 = peg$c1;
				}
				if (s3 !== peg$FAILED) {
					peg$reportedPos = s2;
					s3 = peg$c140(s3);
				}
				s2 = s3;
				if (s2 === peg$FAILED) {
					s2 = peg$currPos;
					if (input.charCodeAt(peg$currPos) === 47) {
						s3 = peg$c141;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c142);
						}
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parseuppercase_letter();
						if (s4 !== peg$FAILED) {
							s5 = peg$parseuppercase_letter();
							if (s5 !== peg$FAILED) {
								peg$reportedPos = s2;
								s3 = peg$c143(s4, s5);
								s2 = s3;
							} else {
								peg$currPos = s2;
								s2 = peg$c1;
							}
						} else {
							peg$currPos = s2;
							s2 = peg$c1;
						}
					} else {
						peg$currPos = s2;
						s2 = peg$c1;
					}
				}
				if (s2 !== peg$FAILED) {
					peg$reportedPos = s0;
					s1 = peg$c144(s1, s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			return s0;
		}

		function peg$parsec_num() {
			var s0, s1, s2, s3, s4, s5;
			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$currPos;
			s3 = peg$parsedigit();
			if (s3 !== peg$FAILED) {
				s4 = peg$parsedigit();
				if (s4 !== peg$FAILED) {
					s5 = peg$parsedigit();
					if (s5 !== peg$FAILED) {
						s3 = [s3, s4, s5];
						s2 = s3;
					} else {
						peg$currPos = s2;
						s2 = peg$c1;
					}
				} else {
					peg$currPos = s2;
					s2 = peg$c1;
				}
			} else {
				peg$currPos = s2;
				s2 = peg$c1;
			}
			if (s2 !== peg$FAILED) {
				peg$reportedPos = s1;
				s2 = peg$c146(s2);
			}
			s1 = s2;
			if (s1 === peg$FAILED) {
				s1 = peg$currPos;
				s2 = peg$parsedigit();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 2) === peg$c147) {
						s3 = peg$c147;
						peg$currPos += 2;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c148);
						}
					}
					if (s3 !== peg$FAILED) {
						peg$reportedPos = s1;
						s2 = peg$c149(s2);
						s1 = s2;
					} else {
						peg$currPos = s1;
						s1 = peg$c1;
					}
				} else {
					peg$currPos = s1;
					s1 = peg$c1;
				}
			}
			if (s1 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 73) {
					s2 = peg$c150;
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c151);
					}
				}
				if (s2 === peg$FAILED) {
					s2 = peg$c3;
				}
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 76) {
						s3 = peg$c152;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c153);
						}
					}
					if (s3 === peg$FAILED) {
						s3 = peg$c3;
					}
					if (s3 !== peg$FAILED) {
						peg$reportedPos = s0;
						s1 = peg$c154(s1, s2, s3);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$c1;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$c1;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$c1;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c145);
				}
			}
			return s0;
		}

		function peg$parsec_sect() {
			var s0;
			s0 = peg$parseuppercase_letter();
			if (s0 === peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 42) {
					s0 = peg$c155;
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c156);
					}
				}
			}
			return s0;
		}

		function peg$parsec_year() {
			var s0, s1, s2, s3, s4, s5;
			s0 = peg$currPos;
			s1 = peg$currPos;
			s2 = peg$parsedigit();
			if (s2 !== peg$FAILED) {
				s3 = peg$parsedigit();
				if (s3 !== peg$FAILED) {
					s4 = peg$parsedigit();
					if (s4 !== peg$FAILED) {
						s5 = peg$parsedigit();
						if (s5 !== peg$FAILED) {
							s2 = [s2, s3, s4, s5];
							s1 = s2;
						} else {
							peg$currPos = s1;
							s1 = peg$c1;
						}
					} else {
						peg$currPos = s1;
						s1 = peg$c1;
					}
				} else {
					peg$currPos = s1;
					s1 = peg$c1;
				}
			} else {
				peg$currPos = s1;
				s1 = peg$c1;
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c157(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 42) {
					s0 = peg$c155;
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c156);
					}
				}
			}
			return s0;
		}

		function peg$parsec_sem() {
			var s0, s1;
			s0 = peg$currPos;
			if (peg$c158.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c159);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c160(s1);
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 42) {
					s0 = peg$c155;
					peg$currPos++;
				} else {
					s0 = peg$FAILED;
					if (peg$silentFails === 0) {
						peg$fail(peg$c156);
					}
				}
			}
			return s0;
		}

		function peg$parseuppercase_letter() {
			var s0, s1;
			s0 = peg$currPos;
			if (peg$c161.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c162);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c163(s1);
			}
			s0 = s1;
			return s0;
		}

		function peg$parseword() {
			var s0, s1, s2;
			s0 = peg$currPos;
			s1 = [];
			if (peg$c164.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c165);
				}
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c164.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) {
							peg$fail(peg$c165);
						}
					}
				}
			} else {
				s1 = peg$c1;
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c166(s1);
			}
			s0 = s1;
			return s0;
		}

		function peg$parsedigit() {
			var s0, s1;
			s0 = peg$currPos;
			if (peg$c167.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c168);
				}
			}
			if (s1 !== peg$FAILED) {
				peg$reportedPos = s0;
				s1 = peg$c160(s1);
			}
			s0 = s1;
			return s0;
		}

		function peg$parseopen_paren() {
			var s0;
			if (input.charCodeAt(peg$currPos) === 40) {
				s0 = peg$c169;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c170);
				}
			}
			return s0;
		}

		function peg$parseclose_paren() {
			var s0;
			if (input.charCodeAt(peg$currPos) === 41) {
				s0 = peg$c171;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) {
					peg$fail(peg$c172);
				}
			}
			return s0;
		}
		var globalLastDept;

		function storeDept(dept) {
			globalLastDept = dept;
		}

		function fetchDept(dept) {
			return globalLastDept;
		}
		var flatten = require('lodash').flatten;
		var expandDepartment = require('./expand-department');
		peg$result = peg$startRuleFunction();
		if (peg$result !== peg$FAILED && peg$currPos === input.length) {
			return peg$result;
		} else {
			if (peg$result !== peg$FAILED && peg$currPos < input.length) {
				peg$fail({
					type: "end",
					description: "end of input"
				});
			}
			throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
		}
	}
	return {
		SyntaxError: SyntaxError,
		parse: parse
	};
})();
